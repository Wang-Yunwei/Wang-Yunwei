## 判断对象是否为空
Optional.of(pendingInfo).orElseThrow(() -> new BusinessException(ExceptionEnum.GET_WORK_INFO_ERROR));
-------------------------------------------------------------------

# 打印SQL日志
mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
-------------------------------------------------------------------

## 打印日志使用占位符
private static final Logger LOGGER = LoggerFactory.getLogger(ReaderExcelUtilsServiceImpl.class);
LOGGER.info("=====ID号: {},【{}】,MD5: {}", str[0], str[1], md5Hex);
-------------------------------------------------------------------

## 判断List是否为null
ContainerUtil.isEmpty(List)
-------------------------------------------------------------------

## 分页操作,设置偏移量
final Integer page = (knowledgeQueryParametersDto.getPage() - 1) * knowledgeQueryParametersDto.getSize();
-------------------------------------------------------------------

## 为 str 字符串加上左右各百分号，方便做模糊查询
final String result = StringUtils.isEmpty(str) ? null : Constants.PERCENT_STR
						+ str.replaceAll("\\\\", "\\\\\\\\")
								.replaceAll("_", "\\\\_")
								.replaceAll("%", "\\\\%")
						+ Constants.PERCENT_STR;
-------------------------------------------------------------------

## 纪检用于查询加密的字段
AES_DECRYPT(from_base64(name),"WXYcRTqJP04QwDpW")

UPDATE process_task SET work_order_title = to_base64(AES_ENCRYPT(work_order_title,'WXYcRTqJP04QwDpW'));

SELECT AES_DECRYPT(from_base64('6p/r9I1SKxTFuWW3k5nvheNCQXsDImG1R7DGONBHWns='),'WXYcRTqJP04QwDpW');

SELECT task.work_order_title,(SELECT AES_DECRYPT(from_base64(task.work_order_title),'WXYcRTqJP04QwDpW')) tittle FROM process_task task
-------------------------------------------------------------------

## 判断当前系统环境 (Linux或windows)
String classPath;
if ("Linux".equals(System.getProperties().getProperty("os.name"))) {
  classPath = Thread.currentThread().getContextClassLoader().getResource("/").getPath();
} else {
  classPath = Thread.currentThread().getContextClassLoader().getResource("/").getPath().substring(1);
}

String classPath = "Linux".equals(System.getProperties().getProperty("os.name"))
            ? Thread.currentThread().getContextClassLoader().getResource("/").getPath()
            : Thread.currentThread().getContextClassLoader().getResource("/").getPath().substring(1);
-------------------------------------------------------------------

## 纪检抛出自定义异常
throw new BusinessException(ResponseConstant.Flow.BUSINESS_EXCEPTION, "流程平台获取处理路径列表失败!");

【隐蔽工程】- 修改映射字段名错误

Code Source From: Self Code

市场项目编号（名称）：B201985-032

jira: #JTJZHJS-5708
-------------------------------------------------------------------

## 将pendingList数组中的数据复制到PendingListDto.class并返回List<PendingListDto>
final List<PendingListDto> pendingListDto = BeanMapper.mapList(pendingList, PendingListDto.class);
-------------------------------------------------------------------

## 文本注释中可用的注解
/**
 * <p>标记         用于                          作用</p>
 * @author        类或方法                       一般用于描述开放者
 * @version       类                             版本说明
 * @see           对类、属性、方法的说明     　　参考转向，也就是相关主题 
 * @param         方法                           对方法参数的说明
 * @throws        方法                           对异常的说明
 * @return        方法                           对返回值的说明
 * {@value}       方法，类 、属性                可以用于生成被标记的常量字段的值。
 * {@inheritDoc}  方法、类                       可以集成上一个文档的注释
 * {@link}        类、方法                       链接标签
 * {@linkplain}   类、方法                       链接标签、与上一个标签唯一的不同就是因为字体不同，如果 label 是个纯文本，那就使用 linkplain 
 * @since         类、方法                       表达的是被标记元素是哪个发布版本引入的
 * @exception     方法                           跟@throws的用法相同   
 * @serialData
 * <pre>          方法、类                       没错，这就是那个 HTML 标签，用于显示“原始样子”的。
 */
-------------------------------------------------------------------

-------------------------------------------------------------------

## 能开平台controller接口注解
@NoAuthentication //免登陆
@Authority(name = Name.A001_Approve_Center) //接口访问权限
@ResponseForJson //返回值封装为 JSON
@ValidDto //与 @JsonDto 配套使用
@RequestMapping(value = "/abilityLogo/{fileId}", method = RequestMethod.GET)
@SystemControllerLog(description = "通过fileId获取图片文件") //记录日志
public ResponseDto getPartnerLogo(@JsonDto final String fileId) {

	final byte[] image = imageService.getImageByFileId(fileId, -999999999);

	return ResponseUtil.createResponseDto(
		Collections.singletonMap("imageBase64", image), null);
}

@PathVariable ---> 入参是非 bean 类型的用 @PathVariable
@JsonDto      ---> 入参是 bean 用 @JsonDto 封装
-------------------------------------------------------------------

## 能开平台获取登陆的ID,获取 operatorId 或 partnerId
final Integer partnerId = (Integer) HttpSessionUtil.getHttpSession().getAttribute(FrameConstants.USER_ID);
-------------------------------------------------------------------

## 判断是否有结束时间,设置结束时间加上一天的毫秒数
if (null != knowledgeQueryParametersDto.getEndTime()) {
    final Date endTime = knowledgeQueryParametersDto.getEndTime();
    final Long timestamp = endTime.getTime() + 86400000;
    final Timestamp endTimes = new Timestamp(timestamp);
    knowledgeQueryParametersDto.setEndTime(endTimes);
}
-------------------------------------------------------------------

## 能开平台添加操作日志
try {
    operatorLogFunction.addOperatorDmzLog("新建内存数据块", record.getName());
} catch (final Exception e) {
    LOGGER.error("insertMongoService:新建内存数据块：", e);
}
-------------------------------------------------------------------

## 能开平台自定义异常
throw new BusinessException(ExceptionEnum.BUSINESS_CHECK_EXCP.setExceptionMsg("解密失败"));
-------------------------------------------------------------------

## 获取时间戳

获取系统时间戳,已封装的
final Date date = DateUtil.getCurrentTime();

方法 一
System.currentTimeMillis();
方法 二
Calendar.getInstance().getTimeInMillis();
方法 三
new Date().getTime();
-------------------------------------------------------------------

## 复制字段值 dto:数据源,searchDto:接受数据
BeanUtils.copyProperties(dto, searchDto);
-------------------------------------------------------------------

## Dto验证邮箱注解
@NotBlank
@Pattern(regexp = FormatConstants.EMAIL_FORMAT, message = "邮箱格式错误")

--1.@NotNull: 不能为null，但可以为empty (""," ","   ")

--2.@NotEmpty: Collection、Map、数组,不能为null,而且长度必须大于0 (" ","  ")

--3.@NotBlank: 只能作用在String上，不能为null，而且调用trim()后，长度必须大于0 ("test")
               即：必须有实际字符

## 验证值得范围
/**
 * 发布状态 0:未发布；1：已发布
 */
@NotNull
@Range(min = 0, max = 1, message = "公告发布状态错误")
private Integer publishStatus;
-------------------------------------------------------------------

## 不需要字段,不返回给前端注解
@JsonIgnore: 此注解加在属性字段上
@JsonIgnoreProperties({"字段1","字段2","字段3"}): 该注解加在类上面
-------------------------------------------------------------------

## Dto验证手机注解
@Pattern(regexp = FormatConstants.PHONE_FORMAT, message = "手机号码格式错误")
-------------------------------------------------------------------

## 展示时间注解(处理java时间缺陷,修改时区)
/**
 * 日期
 */
@JsonDeserialize(using = JacksonTimestampDeserializer.class)
@JsonSerialize(using = JacksonTimestampSerializer.class)
private Date updateTime;


--1.@JsonFormat(pattern="yyyy-MM-dd HH:mm:ss", timezone="GMT+8")
    private Date updateTime;
-------------------------------------------------------------------

## 统计30分钟前的5分钟的数据
endTime = DateUtil.addMinutes(now, -30);
startTime = stasNorthAnalysisDao.getLastUpdateTime();
if (startTime == null) {
    startTime = DateUtil.addMinutes(now, -35);
}
-------------------------------------------------------------------

## 一天的毫秒数
86400000

## 一年的毫秒数
31536000000

## 一百年的毫秒数
3155673600000

-------------------------------------------------------------------

## 能开平台处理水印
String waterMarks = null;
try {
    waterMarks = DecodeUtil.encodeInURL(waterMark);
} catch (final UnsupportedEncodingException e) {
    throw new BusinessException(ExceptionEnum.BUSINESS_CHECK_EXCP.setExceptionMsg("水印字段编码错误"));
}
-------------------------------------------------------------------

## 能开平台 servcie 捕获异常
try {

} catch (final BusinessException e) {
    throw e;
} catch (final Exception e) {
   throw new SystemException(ExceptionEnum.EXECUTE_RUNTIME_EXCP.setExceptionMsg("添加运维知识失败"));
}
-------------------------------------------------------------------

## 能开平台本地启动项目需要手动添加的依赖
<dependency>
  <groupId>io.netty</groupId>
  <artifactId>netty-tcnative-boringssl-static</artifactId>
  <version>1.1.33.Fork26</version>
</dependency>

-------------------------------------------------------------------


